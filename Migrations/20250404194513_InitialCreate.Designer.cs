// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SimplyBooksBEnd.Migrations
{
    [DbContext(typeof(SimplyBooksBEndDbContext))]
    [Migration("20250404194513_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimplyBooksBEnd.Models.Author", b =>
                {
                    b.Property<string>("firebaseKey")
                        .HasColumnType("text");

                    b.Property<string>("UserUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<bool>("favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("firebaseKey");

                    b.HasIndex("UserUid");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            firebaseKey = "author1",
                            UserUid = "user1",
                            email = "maxlucado@example.com",
                            favorite = true,
                            first_name = "Max",
                            last_name = "Lucado"
                        },
                        new
                        {
                            firebaseKey = "author2",
                            UserUid = "user2",
                            email = "francinerivers@example.com",
                            favorite = true,
                            first_name = "Francine",
                            last_name = "Rivers"
                        },
                        new
                        {
                            firebaseKey = "author3",
                            UserUid = "user1",
                            email = "karenkingsbury@example.com",
                            favorite = false,
                            first_name = "Karen",
                            last_name = "Kingsbury"
                        });
                });

            modelBuilder.Entity("SimplyBooksBEnd.Models.Book", b =>
                {
                    b.Property<string>("firebaseKey")
                        .HasColumnType("text");

                    b.Property<string>("AuthorFirebaseKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<decimal?>("price")
                        .HasColumnType("numeric");

                    b.Property<bool>("sale")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("firebaseKey");

                    b.HasIndex("AuthorFirebaseKey");

                    b.HasIndex("UserUid");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            firebaseKey = "book1",
                            AuthorFirebaseKey = "author1",
                            UserUid = "user1",
                            description = "A devotional book filled with insights and reflections for daily living.",
                            image = "image_url1",
                            price = 12.99m,
                            sale = true,
                            title = "Grace for the Moment"
                        },
                        new
                        {
                            firebaseKey = "book2",
                            AuthorFirebaseKey = "author2",
                            UserUid = "user2",
                            description = "A Christian retelling of the biblical story of Hosea and Gomer.",
                            image = "image_url2",
                            price = 14.99m,
                            sale = false,
                            title = "Redeeming Love"
                        },
                        new
                        {
                            firebaseKey = "book3",
                            AuthorFirebaseKey = "author3",
                            UserUid = "user1",
                            description = "A novel that explores faith, love, and the healing power of relationships.",
                            image = "image_url3",
                            price = 10.99m,
                            sale = true,
                            title = "The Bridge"
                        });
                });

            modelBuilder.Entity("SimplyBooksBEnd.Models.User", b =>
                {
                    b.Property<string>("uid")
                        .HasColumnType("text");

                    b.HasKey("uid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            uid = "user1"
                        },
                        new
                        {
                            uid = "user2"
                        });
                });

            modelBuilder.Entity("SimplyBooksBEnd.Models.Author", b =>
                {
                    b.HasOne("SimplyBooksBEnd.Models.User", "User")
                        .WithMany("Authors")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimplyBooksBEnd.Models.Book", b =>
                {
                    b.HasOne("SimplyBooksBEnd.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorFirebaseKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyBooksBEnd.Models.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimplyBooksBEnd.Models.User", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
